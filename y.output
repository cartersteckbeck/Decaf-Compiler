Terminals unused in grammar

   "class"
   "interface"
   "null"
   "this"
   "extends"
   "implements"
   "for"
   "while"
   "if"
   "else"
   "return"
   "New"
   "NewArray"
   "Print"
   "ReadInteger"
   "ReadLine"
   "<="
   ">="
   "=="
   "!="
   "&&"
   "||"
   T_DBLLITERAL
   T_INTLITERAL
   T_BOOLLITERAL
   T_STRINGLITERAL


Grammar

    0 $accept: pgm $end

    1 pgm: program

    2 program: decl

    3 decl: %empty
    4     | decl varDecl
    5     | decl funcDecl

    6 varDecl: variable ';'

    7 variable: type identifier

    8 type: usertype
    9     | primtype
   10     | arraytype

   11 usertype: typeidentifier

   12 primtype: string
   13         | int
   14         | double
   15         | bool

   16 arraytype: usertype array
   17          | primtype array

   18 funcDecl: type identifier '(' formals ')' stmtblock
   19         | void identifier '(' formals ')' stmtblock

   20 formals: %empty
   21        | formals variable
   22        | formals variable ','

   23 varDeclStar: %empty
   24            | varDeclStar varDecl

   25 stmtStar: %empty
   26         | stmtStar stmt

   27 stmtblock: '{' varDeclStar stmtStar '}'

   28 stmt: breakStmt

   29 breakStmt: break ';'

   30 typeidentifier: T_TYPEIDENTIFIER

   31 identifier: T_IDENTIFIER

   32 string: "string"

   33 int: "int"

   34 double: "double"

   35 bool: "bool"

   36 array: "[]"

   37 void: "void"

   38 break: "break"


Terminals, with rules where they appear

$end (0) 0
'(' (40) 18 19
')' (41) 18 19
',' (44) 22
';' (59) 6 29
'{' (123) 27
'}' (125) 27
error (256)
"void" (260) 37
"int" (261) 33
"double" (262) 34
"bool" (263) 35
"string" (264) 32
"class" (265)
"interface" (266)
"null" (267)
"this" (268)
"extends" (269)
"implements" (270)
"for" (271)
"while" (272)
"if" (273)
"else" (274)
"return" (275)
"break" (276) 38
"New" (277)
"NewArray" (278)
"Print" (279)
"ReadInteger" (280)
"ReadLine" (281)
"<=" (282)
">=" (283)
"==" (284)
"!=" (285)
"&&" (286)
"||" (287)
"[]" (288) 36
T_DBLLITERAL (289)
T_INTLITERAL (290)
T_BOOLLITERAL (291)
T_IDENTIFIER (292) 31
T_TYPEIDENTIFIER (293) 30
T_STRINGLITERAL (294)


Nonterminals, with rules where they appear

$accept (44)
    on left: 0
pgm (45)
    on left: 1, on right: 0
program (46)
    on left: 2, on right: 1
decl (47)
    on left: 3 4 5, on right: 2 4 5
varDecl (48)
    on left: 6, on right: 4 24
variable (49)
    on left: 7, on right: 6 21 22
type (50)
    on left: 8 9 10, on right: 7 18
usertype (51)
    on left: 11, on right: 8 16
primtype (52)
    on left: 12 13 14 15, on right: 9 17
arraytype (53)
    on left: 16 17, on right: 10
funcDecl (54)
    on left: 18 19, on right: 5
formals (55)
    on left: 20 21 22, on right: 18 19 21 22
varDeclStar (56)
    on left: 23 24, on right: 24 27
stmtStar (57)
    on left: 25 26, on right: 26 27
stmtblock (58)
    on left: 27, on right: 18 19
stmt (59)
    on left: 28, on right: 26
breakStmt (60)
    on left: 29, on right: 28
typeidentifier (61)
    on left: 30, on right: 11
identifier (62)
    on left: 31, on right: 7 18 19
string (63)
    on left: 32, on right: 12
int (64)
    on left: 33, on right: 13
double (65)
    on left: 34, on right: 14
bool (66)
    on left: 35, on right: 15
array (67)
    on left: 36, on right: 16 17
void (68)
    on left: 37, on right: 19
break (69)
    on left: 38, on right: 29


State 0

    0 $accept: . pgm $end

    $default  reduce using rule 3 (decl)

    pgm      go to state 1
    program  go to state 2
    decl     go to state 3


State 1

    0 $accept: pgm . $end

    $end  shift, and go to state 4


State 2

    1 pgm: program .

    $default  reduce using rule 1 (pgm)


State 3

    2 program: decl .
    4 decl: decl . varDecl
    5     | decl . funcDecl

    "void"            shift, and go to state 5
    "int"             shift, and go to state 6
    "double"          shift, and go to state 7
    "bool"            shift, and go to state 8
    "string"          shift, and go to state 9
    T_TYPEIDENTIFIER  shift, and go to state 10

    $default  reduce using rule 2 (program)

    varDecl         go to state 11
    variable        go to state 12
    type            go to state 13
    usertype        go to state 14
    primtype        go to state 15
    arraytype       go to state 16
    funcDecl        go to state 17
    typeidentifier  go to state 18
    string          go to state 19
    int             go to state 20
    double          go to state 21
    bool            go to state 22
    void            go to state 23


State 4

    0 $accept: pgm $end .

    $default  accept


State 5

   37 void: "void" .

    $default  reduce using rule 37 (void)


State 6

   33 int: "int" .

    $default  reduce using rule 33 (int)


State 7

   34 double: "double" .

    $default  reduce using rule 34 (double)


State 8

   35 bool: "bool" .

    $default  reduce using rule 35 (bool)


State 9

   32 string: "string" .

    $default  reduce using rule 32 (string)


State 10

   30 typeidentifier: T_TYPEIDENTIFIER .

    $default  reduce using rule 30 (typeidentifier)


State 11

    4 decl: decl varDecl .

    $default  reduce using rule 4 (decl)


State 12

    6 varDecl: variable . ';'

    ';'  shift, and go to state 24


State 13

    7 variable: type . identifier
   18 funcDecl: type . identifier '(' formals ')' stmtblock

    T_IDENTIFIER  shift, and go to state 25

    identifier  go to state 26


State 14

    8 type: usertype .
   16 arraytype: usertype . array

    "[]"  shift, and go to state 27

    $default  reduce using rule 8 (type)

    array  go to state 28


State 15

    9 type: primtype .
   17 arraytype: primtype . array

    "[]"  shift, and go to state 27

    $default  reduce using rule 9 (type)

    array  go to state 29


State 16

   10 type: arraytype .

    $default  reduce using rule 10 (type)


State 17

    5 decl: decl funcDecl .

    $default  reduce using rule 5 (decl)


State 18

   11 usertype: typeidentifier .

    $default  reduce using rule 11 (usertype)


State 19

   12 primtype: string .

    $default  reduce using rule 12 (primtype)


State 20

   13 primtype: int .

    $default  reduce using rule 13 (primtype)


State 21

   14 primtype: double .

    $default  reduce using rule 14 (primtype)


State 22

   15 primtype: bool .

    $default  reduce using rule 15 (primtype)


State 23

   19 funcDecl: void . identifier '(' formals ')' stmtblock

    T_IDENTIFIER  shift, and go to state 25

    identifier  go to state 30


State 24

    6 varDecl: variable ';' .

    $default  reduce using rule 6 (varDecl)


State 25

   31 identifier: T_IDENTIFIER .

    $default  reduce using rule 31 (identifier)


State 26

    7 variable: type identifier .
   18 funcDecl: type identifier . '(' formals ')' stmtblock

    '('  shift, and go to state 31

    $default  reduce using rule 7 (variable)


State 27

   36 array: "[]" .

    $default  reduce using rule 36 (array)


State 28

   16 arraytype: usertype array .

    $default  reduce using rule 16 (arraytype)


State 29

   17 arraytype: primtype array .

    $default  reduce using rule 17 (arraytype)


State 30

   19 funcDecl: void identifier . '(' formals ')' stmtblock

    '('  shift, and go to state 32


State 31

   18 funcDecl: type identifier '(' . formals ')' stmtblock

    $default  reduce using rule 20 (formals)

    formals  go to state 33


State 32

   19 funcDecl: void identifier '(' . formals ')' stmtblock

    $default  reduce using rule 20 (formals)

    formals  go to state 34


State 33

   18 funcDecl: type identifier '(' formals . ')' stmtblock
   21 formals: formals . variable
   22        | formals . variable ','

    "int"             shift, and go to state 6
    "double"          shift, and go to state 7
    "bool"            shift, and go to state 8
    "string"          shift, and go to state 9
    T_TYPEIDENTIFIER  shift, and go to state 10
    ')'               shift, and go to state 35

    variable        go to state 36
    type            go to state 37
    usertype        go to state 14
    primtype        go to state 15
    arraytype       go to state 16
    typeidentifier  go to state 18
    string          go to state 19
    int             go to state 20
    double          go to state 21
    bool            go to state 22


State 34

   19 funcDecl: void identifier '(' formals . ')' stmtblock
   21 formals: formals . variable
   22        | formals . variable ','

    "int"             shift, and go to state 6
    "double"          shift, and go to state 7
    "bool"            shift, and go to state 8
    "string"          shift, and go to state 9
    T_TYPEIDENTIFIER  shift, and go to state 10
    ')'               shift, and go to state 38

    variable        go to state 36
    type            go to state 37
    usertype        go to state 14
    primtype        go to state 15
    arraytype       go to state 16
    typeidentifier  go to state 18
    string          go to state 19
    int             go to state 20
    double          go to state 21
    bool            go to state 22


State 35

   18 funcDecl: type identifier '(' formals ')' . stmtblock

    '{'  shift, and go to state 39

    stmtblock  go to state 40


State 36

   21 formals: formals variable .
   22        | formals variable . ','

    ','  shift, and go to state 41

    $default  reduce using rule 21 (formals)


State 37

    7 variable: type . identifier

    T_IDENTIFIER  shift, and go to state 25

    identifier  go to state 42


State 38

   19 funcDecl: void identifier '(' formals ')' . stmtblock

    '{'  shift, and go to state 39

    stmtblock  go to state 43


State 39

   27 stmtblock: '{' . varDeclStar stmtStar '}'

    $default  reduce using rule 23 (varDeclStar)

    varDeclStar  go to state 44


State 40

   18 funcDecl: type identifier '(' formals ')' stmtblock .

    $default  reduce using rule 18 (funcDecl)


State 41

   22 formals: formals variable ',' .

    $default  reduce using rule 22 (formals)


State 42

    7 variable: type identifier .

    $default  reduce using rule 7 (variable)


State 43

   19 funcDecl: void identifier '(' formals ')' stmtblock .

    $default  reduce using rule 19 (funcDecl)


State 44

   24 varDeclStar: varDeclStar . varDecl
   27 stmtblock: '{' varDeclStar . stmtStar '}'

    "int"             shift, and go to state 6
    "double"          shift, and go to state 7
    "bool"            shift, and go to state 8
    "string"          shift, and go to state 9
    T_TYPEIDENTIFIER  shift, and go to state 10

    $default  reduce using rule 25 (stmtStar)

    varDecl         go to state 45
    variable        go to state 12
    type            go to state 37
    usertype        go to state 14
    primtype        go to state 15
    arraytype       go to state 16
    stmtStar        go to state 46
    typeidentifier  go to state 18
    string          go to state 19
    int             go to state 20
    double          go to state 21
    bool            go to state 22


State 45

   24 varDeclStar: varDeclStar varDecl .

    $default  reduce using rule 24 (varDeclStar)


State 46

   26 stmtStar: stmtStar . stmt
   27 stmtblock: '{' varDeclStar stmtStar . '}'

    "break"  shift, and go to state 47
    '}'      shift, and go to state 48

    stmt       go to state 49
    breakStmt  go to state 50
    break      go to state 51


State 47

   38 break: "break" .

    $default  reduce using rule 38 (break)


State 48

   27 stmtblock: '{' varDeclStar stmtStar '}' .

    $default  reduce using rule 27 (stmtblock)


State 49

   26 stmtStar: stmtStar stmt .

    $default  reduce using rule 26 (stmtStar)


State 50

   28 stmt: breakStmt .

    $default  reduce using rule 28 (stmt)


State 51

   29 breakStmt: break . ';'

    ';'  shift, and go to state 52


State 52

   29 breakStmt: break ';' .

    $default  reduce using rule 29 (breakStmt)
